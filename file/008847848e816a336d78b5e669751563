<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>
<meta charset="UTF-8">
<title>注册_登录-团贷网</title>
<link rel="stylesheet" type="text/css" href="//js.tuandai.com/styles/base20151225.css">
<link rel="stylesheet" type="text/css" href="//js.tuandai.com/styles/public20151225.css">
<link rel="stylesheet" type="text/css" href="//js.tuandai.com/styles/user/reg_login/reg_login.css?v=20161020001">
</head>
<body>
<div class="reg-top-bar bgff">
<div class="top-bar-wraper w1200  auto">
<a href="/" class="pt5 dib l">
<img src="//js.tuandai.com/images/default/logo.png" alt="团贷网"></a>
<img class="pt25 ml10" src="//image.tuandai.com/newfile/image/2016/20160720/20160720175434_2523.png" alt="光影侠">
</div>
</div>
<div class="reg-login-box abs h390 " style="right: 0px; margin-top: -184px; margin-left: 220px; ">
<div class="login-box">
<h2 class="login cl fix login-h2">
<div class="l f22 g6">登录</div>
<div class="r f14 mt10 g6">还没账号？<a href="/user/Register.aspx " class="g-blue reg-now">马上注册</a></div>
</h2>
<div class="input-box " style="border: 1px solid rgb(76, 228, 172); ">
<input class="user-text checkedN errorC phone " onpaste="return false" oncontextmenu="return false" oncopy="return false" oncut="return false" id="txtUserAll" type="text" value="账户名/手机号/邮箱" style="color: rgb(102, 102, 102); ">
<div class="mes-tip abs" style="visibility: visible; "></div>
<div class="reg-tip" id="err_name" style="visibility: hidden;"></div>
</div>
<div class="input-box mb20">
<input class=" change-psw psw-text" type="text" value="密码">
<input class="psw psw-psw" type="password" onpaste="return false" oncontextmenu="return false" oncopy="return false" oncut="return false" id="txtPassword" style="display: none;" onkeypress="detectCapsLock(event)">
<div class="reg-tip" id="err_pwd" style="visibility: hidden;"></div>
</div>
<div class="freeze" style="visibility: hidden;"><i class="reg-login-icon err-icon"></i>因连续输错5次密码，您的账户已被冻结。 解冻时间：2016年09月07日 10时39分</div>
<div class="get-psw login-get-psw">
<a href="/user/ResetPwd_Telno.aspx" class="r ">忘记密码</a>
<label class="g9">
<i class="reg-login-icon select"></i>
<input type="checkbox" class="login-check" value="" checked="checked" id="cbRememberMe">
记住账号
</label></div>

<a href="javascript:;" id="btnSign" class="   td-btn-1 td-btn-1-blue reg-login-btn ">登录</a>
<div class="f12 mt20 g9 tc">
<font rel="nofollow" target="_blank">您的账户信息已使用SSL加密技术，数据传输安全
</font>
</div>
</div>
</div>
<div class="container  bgff" id="loginContentBody" style="background:#fff  url('//image.tuandai.com/newfile/image/2016/20161220/20161220152921_8833.jpg') no-repeat    center">
<a href="http://hd.tuandai.com/web/invitation_4th/Index.aspx?tdsource=pclogon" target="_blank" class="banner-link abs"> </a>
<div class="banner abs">
<div class="abs banner-img"> </div>
</div>
<div class="w1200 auto">
<div class="banner-wrwp rel">
</div>
</div>
</div>
<div class="reg-footer fix tc" style="height: 65px; ">
2010-2016 版权所有 © 团贷网
<a href="http://www.miitbeian.gov.cn" target="_blank" class="g6">粤ICP备12043601号-1</a> 地址：东莞市南城街道莞太路111号民间金融大厦1号楼28楼 <br> 东莞团贷网互联网科技服务有限公司
</div>

<script src="//js.tuandai.com/scripts/jquery-1.7.1.js" type="text/javascript" charset="utf-8"></script>
<script type="text/javascript" src="//js.tuandai.com/scripts/user/common.js?v=20160805001"></script>
<script type="text/javascript" src="//js.tuandai.com/scripts/user/jquery.cookies.2.2.0.js" charset="utf-8"></script>
<script type="text/javascript" src="//js.tuandai.com/scripts/public.js?v=20160805001"></script>
<script type="text/javascript" src="//js.tuandai.com/scripts/user/login2.js?v=2016122001"></script>

<script type="text/javascript">
	    
	    if (document.body.clientHeight < 650) {
             
	        $('.reg-footer').css({ "height": "65px" })
	        $(".reg-login-box").css({ "margin-top": "-184px","margin-left":"220px" });

	    }
	    function stringToHex(s) {
	        var r = '';
	        var hexes = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
	        for (var i = 0; i < (s.length) ; i++) {
	            r += hexes[s.charCodeAt(i) >> 4] + hexes[s.charCodeAt(i) & 0xf]
	        }
	        return r
	    }

	    function HexTostring(s) {
	        var r = '';
	        for (var i = 0; i < s.length; i += 2) {
	            var sxx = parseInt(s.substring(i, i + 2), 16);
	            r += String.fromCharCode(sxx)
	        }
	        return r
	    }

	    function des(beinetkey, message, encrypt, mode, iv) {
	        var spfunction1 = new Array(0x1010400, 0, 0x10000, 0x1010404, 0x1010004, 0x10404, 0x4, 0x10000, 0x400, 0x1010400, 0x1010404, 0x400, 0x1000404, 0x1010004, 0x1000000, 0x4, 0x404, 0x1000400, 0x1000400, 0x10400, 0x10400, 0x1010000, 0x1010000, 0x1000404, 0x10004, 0x1000004, 0x1000004, 0x10004, 0, 0x404, 0x10404, 0x1000000, 0x10000, 0x1010404, 0x4, 0x1010000, 0x1010400, 0x1000000, 0x1000000, 0x400, 0x1010004, 0x10000, 0x10400, 0x1000004, 0x400, 0x4, 0x1000404, 0x10404, 0x1010404, 0x10004, 0x1010000, 0x1000404, 0x1000004, 0x404, 0x10404, 0x1010400, 0x404, 0x1000400, 0x1000400, 0, 0x10004, 0x10400, 0, 0x1010004);
	        var spfunction2 = new Array(-0x7fef7fe0, -0x7fff8000, 0x8000, 0x108020, 0x100000, 0x20, -0x7fefffe0, -0x7fff7fe0, -0x7fffffe0, -0x7fef7fe0, -0x7fef8000, -0x80000000, -0x7fff8000, 0x100000, 0x20, -0x7fefffe0, 0x108000, 0x100020, -0x7fff7fe0, 0, -0x80000000, 0x8000, 0x108020, -0x7ff00000, 0x100020, -0x7fffffe0, 0, 0x108000, 0x8020, -0x7fef8000, -0x7ff00000, 0x8020, 0, 0x108020, -0x7fefffe0, 0x100000, -0x7fff7fe0, -0x7ff00000, -0x7fef8000, 0x8000, -0x7ff00000, -0x7fff8000, 0x20, -0x7fef7fe0, 0x108020, 0x20, 0x8000, -0x80000000, 0x8020, -0x7fef8000, 0x100000, -0x7fffffe0, 0x100020, -0x7fff7fe0, -0x7fffffe0, 0x100020, 0x108000, 0, -0x7fff8000, 0x8020, -0x80000000, -0x7fefffe0, -0x7fef7fe0, 0x108000);
	        var spfunction3 = new Array(0x208, 0x8020200, 0, 0x8020008, 0x8000200, 0, 0x20208, 0x8000200, 0x20008, 0x8000008, 0x8000008, 0x20000, 0x8020208, 0x20008, 0x8020000, 0x208, 0x8000000, 0x8, 0x8020200, 0x200, 0x20200, 0x8020000, 0x8020008, 0x20208, 0x8000208, 0x20200, 0x20000, 0x8000208, 0x8, 0x8020208, 0x200, 0x8000000, 0x8020200, 0x8000000, 0x20008, 0x208, 0x20000, 0x8020200, 0x8000200, 0, 0x200, 0x20008, 0x8020208, 0x8000200, 0x8000008, 0x200, 0, 0x8020008, 0x8000208, 0x20000, 0x8000000, 0x8020208, 0x8, 0x20208, 0x20200, 0x8000008, 0x8020000, 0x8000208, 0x208, 0x8020000, 0x20208, 0x8, 0x8020008, 0x20200);
	        var spfunction4 = new Array(0x802001, 0x2081, 0x2081, 0x80, 0x802080, 0x800081, 0x800001, 0x2001, 0, 0x802000, 0x802000, 0x802081, 0x81, 0, 0x800080, 0x800001, 0x1, 0x2000, 0x800000, 0x802001, 0x80, 0x800000, 0x2001, 0x2080, 0x800081, 0x1, 0x2080, 0x800080, 0x2000, 0x802080, 0x802081, 0x81, 0x800080, 0x800001, 0x802000, 0x802081, 0x81, 0, 0, 0x802000, 0x2080, 0x800080, 0x800081, 0x1, 0x802001, 0x2081, 0x2081, 0x80, 0x802081, 0x81, 0x1, 0x2000, 0x800001, 0x2001, 0x802080, 0x800081, 0x2001, 0x2080, 0x800000, 0x802001, 0x80, 0x800000, 0x2000, 0x802080);
	        var spfunction5 = new Array(0x100, 0x2080100, 0x2080000, 0x42000100, 0x80000, 0x100, 0x40000000, 0x2080000, 0x40080100, 0x80000, 0x2000100, 0x40080100, 0x42000100, 0x42080000, 0x80100, 0x40000000, 0x2000000, 0x40080000, 0x40080000, 0, 0x40000100, 0x42080100, 0x42080100, 0x2000100, 0x42080000, 0x40000100, 0, 0x42000000, 0x2080100, 0x2000000, 0x42000000, 0x80100, 0x80000, 0x42000100, 0x100, 0x2000000, 0x40000000, 0x2080000, 0x42000100, 0x40080100, 0x2000100, 0x40000000, 0x42080000, 0x2080100, 0x40080100, 0x100, 0x2000000, 0x42080000, 0x42080100, 0x80100, 0x42000000, 0x42080100, 0x2080000, 0, 0x40080000, 0x42000000, 0x80100, 0x2000100, 0x40000100, 0x80000, 0, 0x40080000, 0x2080100, 0x40000100);
	        var spfunction6 = new Array(0x20000010, 0x20400000, 0x4000, 0x20404010, 0x20400000, 0x10, 0x20404010, 0x400000, 0x20004000, 0x404010, 0x400000, 0x20000010, 0x400010, 0x20004000, 0x20000000, 0x4010, 0, 0x400010, 0x20004010, 0x4000, 0x404000, 0x20004010, 0x10, 0x20400010, 0x20400010, 0, 0x404010, 0x20404000, 0x4010, 0x404000, 0x20404000, 0x20000000, 0x20004000, 0x10, 0x20400010, 0x404000, 0x20404010, 0x400000, 0x4010, 0x20000010, 0x400000, 0x20004000, 0x20000000, 0x4010, 0x20000010, 0x20404010, 0x404000, 0x20400000, 0x404010, 0x20404000, 0, 0x20400010, 0x10, 0x4000, 0x20400000, 0x404010, 0x4000, 0x400010, 0x20004010, 0, 0x20404000, 0x20000000, 0x400010, 0x20004010);
	        var spfunction7 = new Array(0x200000, 0x4200002, 0x4000802, 0, 0x800, 0x4000802, 0x200802, 0x4200800, 0x4200802, 0x200000, 0, 0x4000002, 0x2, 0x4000000, 0x4200002, 0x802, 0x4000800, 0x200802, 0x200002, 0x4000800, 0x4000002, 0x4200000, 0x4200800, 0x200002, 0x4200000, 0x800, 0x802, 0x4200802, 0x200800, 0x2, 0x4000000, 0x200800, 0x4000000, 0x200800, 0x200000, 0x4000802, 0x4000802, 0x4200002, 0x4200002, 0x2, 0x200002, 0x4000000, 0x4000800, 0x200000, 0x4200800, 0x802, 0x200802, 0x4200800, 0x802, 0x4000002, 0x4200802, 0x4200000, 0x200800, 0, 0x2, 0x4200802, 0, 0x200802, 0x4200000, 0x800, 0x4000002, 0x4000800, 0x800, 0x200002);
	        var spfunction8 = new Array(0x10001040, 0x1000, 0x40000, 0x10041040, 0x10000000, 0x10001040, 0x40, 0x10000000, 0x40040, 0x10040000, 0x10041040, 0x41000, 0x10041000, 0x41040, 0x1000, 0x40, 0x10040000, 0x10000040, 0x10001000, 0x1040, 0x41000, 0x40040, 0x10040040, 0x10041000, 0x1040, 0, 0, 0x10040040, 0x10000040, 0x10001000, 0x41040, 0x40000, 0x41040, 0x40000, 0x10041000, 0x1000, 0x40, 0x10040040, 0x1000, 0x41040, 0x10001000, 0x40, 0x10000040, 0x10040000, 0x10040040, 0x10000000, 0x40000, 0x10001040, 0, 0x10041040, 0x40040, 0x10000040, 0x10040000, 0x10001000, 0x10001040, 0, 0x10041040, 0x41000, 0x41000, 0x1040, 0x1040, 0x40040, 0x10000000, 0x10041000);
	        var keys = des_createKeys(beinetkey);
	        var m = 0,
				i, j, temp, temp2, right1, right2, left, right, looping;
	        var cbcleft, cbcleft2, cbcright, cbcright2;
	        var endloop, loopinc;
	        var len = message.length;
	        var chunk = 0;
	        var iterations = keys.length == 32 ? 3 : 9;
	        if (iterations == 3) {
	            looping = encrypt ? new Array(0, 32, 2) : new Array(30, -2, -2)
	        } else {
	            looping = encrypt ? new Array(0, 32, 2, 62, 30, -2, 64, 96, 2) : new Array(94, 62, -2, 32, 64, 2, 30, -2, -2)
	        }
	        message += '\0\0\0\0\0\0\0\0';
	        result = '';
	        tempresult = '';
	        if (mode == 1) {
	            cbcleft = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);
	            cbcright = (iv.charCodeAt(m++) << 24) | (iv.charCodeAt(m++) << 16) | (iv.charCodeAt(m++) << 8) | iv.charCodeAt(m++);
	            m = 0
	        }
	        while (m < len) {
	            if (encrypt) {
	                left = (message.charCodeAt(m++) << 16) | message.charCodeAt(m++);
	                right = (message.charCodeAt(m++) << 16) | message.charCodeAt(m++)
	            } else {
	                left = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++);
	                right = (message.charCodeAt(m++) << 24) | (message.charCodeAt(m++) << 16) | (message.charCodeAt(m++) << 8) | message.charCodeAt(m++)
	            }
	            if (mode == 1) {
	                if (encrypt) {
	                    left ^= cbcleft;
	                    right ^= cbcright
	                } else {
	                    cbcleft2 = cbcleft;
	                    cbcright2 = cbcright;
	                    cbcleft = left;
	                    cbcright = right
	                }
	            }
	            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	            right ^= temp;
	            left ^= (temp << 4);
	            temp = ((left >>> 16) ^ right) & 0x0000ffff;
	            right ^= temp;
	            left ^= (temp << 16);
	            temp = ((right >>> 2) ^ left) & 0x33333333;
	            left ^= temp;
	            right ^= (temp << 2);
	            temp = ((right >>> 8) ^ left) & 0x00ff00ff;
	            left ^= temp;
	            right ^= (temp << 8);
	            temp = ((left >>> 1) ^ right) & 0x55555555;
	            right ^= temp;
	            left ^= (temp << 1);
	            left = ((left << 1) | (left >>> 31));
	            right = ((right << 1) | (right >>> 31));
	            for (j = 0; j < iterations; j += 3) {
	                endloop = looping[j + 1];
	                loopinc = looping[j + 2];
	                for (i = looping[j]; i != endloop; i += loopinc) {
	                    right1 = right ^ keys[i];
	                    right2 = ((right >>> 4) | (right << 28)) ^ keys[i + 1];
	                    temp = left;
	                    left = right;
	                    right = temp ^ (spfunction2[(right1 >>> 24) & 0x3f] | spfunction4[(right1 >>> 16) & 0x3f] | spfunction6[(right1 >>> 8) & 0x3f] | spfunction8[right1 & 0x3f] | spfunction1[(right2 >>> 24) & 0x3f] | spfunction3[(right2 >>> 16) & 0x3f] | spfunction5[(right2 >>> 8) & 0x3f] | spfunction7[right2 & 0x3f])
	                }
	                temp = left;
	                left = right;
	                right = temp
	            }
	            left = ((left >>> 1) | (left << 31));
	            right = ((right >>> 1) | (right << 31));
	            temp = ((left >>> 1) ^ right) & 0x55555555;
	            right ^= temp;
	            left ^= (temp << 1);
	            temp = ((right >>> 8) ^ left) & 0x00ff00ff;
	            left ^= temp;
	            right ^= (temp << 8);
	            temp = ((right >>> 2) ^ left) & 0x33333333;
	            left ^= temp;
	            right ^= (temp << 2);
	            temp = ((left >>> 16) ^ right) & 0x0000ffff;
	            right ^= temp;
	            left ^= (temp << 16);
	            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	            right ^= temp;
	            left ^= (temp << 4);
	            if (mode == 1) {
	                if (encrypt) {
	                    cbcleft = left;
	                    cbcright = right
	                } else {
	                    left ^= cbcleft2;
	                    right ^= cbcright2
	                }
	            }
	            if (encrypt) {
	                tempresult += String.fromCharCode((left >>> 24), ((left >>> 16) & 0xff), ((left >>> 8) & 0xff), (left & 0xff), (right >>> 24), ((right >>> 16) & 0xff), ((right >>> 8) & 0xff), (right & 0xff))
	            } else {
	                tempresult += String.fromCharCode(((left >>> 16) & 0xffff), (left & 0xffff), ((right >>> 16) & 0xffff), (right & 0xffff))
	            }
	            encrypt ? chunk += 16 : chunk += 8;
	            if (chunk == 512) {
	                result += tempresult;
	                tempresult = '';
	                chunk = 0
	            }
	        }
	        return result + tempresult
	    }

	    function des_createKeys(beinetkey) {
	        pc2bytes0 = new Array(0, 0x4, 0x20000000, 0x20000004, 0x10000, 0x10004, 0x20010000, 0x20010004, 0x200, 0x204, 0x20000200, 0x20000204, 0x10200, 0x10204, 0x20010200, 0x20010204);
	        pc2bytes1 = new Array(0, 0x1, 0x100000, 0x100001, 0x4000000, 0x4000001, 0x4100000, 0x4100001, 0x100, 0x101, 0x100100, 0x100101, 0x4000100, 0x4000101, 0x4100100, 0x4100101);
	        pc2bytes2 = new Array(0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808, 0, 0x8, 0x800, 0x808, 0x1000000, 0x1000008, 0x1000800, 0x1000808);
	        pc2bytes3 = new Array(0, 0x200000, 0x8000000, 0x8200000, 0x2000, 0x202000, 0x8002000, 0x8202000, 0x20000, 0x220000, 0x8020000, 0x8220000, 0x22000, 0x222000, 0x8022000, 0x8222000);
	        pc2bytes4 = new Array(0, 0x40000, 0x10, 0x40010, 0, 0x40000, 0x10, 0x40010, 0x1000, 0x41000, 0x1010, 0x41010, 0x1000, 0x41000, 0x1010, 0x41010);
	        pc2bytes5 = new Array(0, 0x400, 0x20, 0x420, 0, 0x400, 0x20, 0x420, 0x2000000, 0x2000400, 0x2000020, 0x2000420, 0x2000000, 0x2000400, 0x2000020, 0x2000420);
	        pc2bytes6 = new Array(0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002, 0, 0x10000000, 0x80000, 0x10080000, 0x2, 0x10000002, 0x80002, 0x10080002);
	        pc2bytes7 = new Array(0, 0x10000, 0x800, 0x10800, 0x20000000, 0x20010000, 0x20000800, 0x20010800, 0x20000, 0x30000, 0x20800, 0x30800, 0x20020000, 0x20030000, 0x20020800, 0x20030800);
	        pc2bytes8 = new Array(0, 0x40000, 0, 0x40000, 0x2, 0x40002, 0x2, 0x40002, 0x2000000, 0x2040000, 0x2000000, 0x2040000, 0x2000002, 0x2040002, 0x2000002, 0x2040002);
	        pc2bytes9 = new Array(0, 0x10000000, 0x8, 0x10000008, 0, 0x10000000, 0x8, 0x10000008, 0x400, 0x10000400, 0x408, 0x10000408, 0x400, 0x10000400, 0x408, 0x10000408);
	        pc2bytes10 = new Array(0, 0x20, 0, 0x20, 0x100000, 0x100020, 0x100000, 0x100020, 0x2000, 0x2020, 0x2000, 0x2020, 0x102000, 0x102020, 0x102000, 0x102020);
	        pc2bytes11 = new Array(0, 0x1000000, 0x200, 0x1000200, 0x200000, 0x1200000, 0x200200, 0x1200200, 0x4000000, 0x5000000, 0x4000200, 0x5000200, 0x4200000, 0x5200000, 0x4200200, 0x5200200);
	        pc2bytes12 = new Array(0, 0x1000, 0x8000000, 0x8001000, 0x80000, 0x81000, 0x8080000, 0x8081000, 0x10, 0x1010, 0x8000010, 0x8001010, 0x80010, 0x81010, 0x8080010, 0x8081010);
	        pc2bytes13 = new Array(0, 0x4, 0x100, 0x104, 0, 0x4, 0x100, 0x104, 0x1, 0x5, 0x101, 0x105, 0x1, 0x5, 0x101, 0x105);
	        var iterations = beinetkey.length >= 24 ? 3 : 1;
	        var keys = new Array(32 * iterations);
	        var shifts = new Array(0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0);
	        var lefttemp, righttemp, m = 0,
				n = 0,
				temp;
	        for (var j = 0; j < iterations; j++) {
	            left = (beinetkey.charCodeAt(m++) << 24) | (beinetkey.charCodeAt(m++) << 16) | (beinetkey.charCodeAt(m++) << 8) | beinetkey.charCodeAt(m++);
	            right = (beinetkey.charCodeAt(m++) << 24) | (beinetkey.charCodeAt(m++) << 16) | (beinetkey.charCodeAt(m++) << 8) | beinetkey.charCodeAt(m++);
	            temp = ((left >>> 4) ^ right) & 0x0f0f0f0f;
	            right ^= temp;
	            left ^= (temp << 4);
	            temp = ((right >>> -16) ^ left) & 0x0000ffff;
	            left ^= temp;
	            right ^= (temp << -16);
	            temp = ((left >>> 2) ^ right) & 0x33333333;
	            right ^= temp;
	            left ^= (temp << 2);
	            temp = ((right >>> -16) ^ left) & 0x0000ffff;
	            left ^= temp;
	            right ^= (temp << -16);
	            temp = ((left >>> 1) ^ right) & 0x55555555;
	            right ^= temp;
	            left ^= (temp << 1);
	            temp = ((right >>> 8) ^ left) & 0x00ff00ff;
	            left ^= temp;
	            right ^= (temp << 8);
	            temp = ((left >>> 1) ^ right) & 0x55555555;
	            right ^= temp;
	            left ^= (temp << 1);
	            temp = (left << 8) | ((right >>> 20) & 0x000000f0);
	            left = (right << 24) | ((right << 8) & 0xff0000) | ((right >>> 8) & 0xff00) | ((right >>> 24) & 0xf0);
	            right = temp;
	            for (i = 0; i < shifts.length; i++) {
	                if (shifts[i]) {
	                    left = (left << 2) | (left >>> 26);
	                    right = (right << 2) | (right >>> 26)
	                } else {
	                    left = (left << 1) | (left >>> 27);
	                    right = (right << 1) | (right >>> 27)
	                }
	                left &= -0xf;
	                right &= -0xf;
	                lefttemp = pc2bytes0[left >>> 28] | pc2bytes1[(left >>> 24) & 0xf] | pc2bytes2[(left >>> 20) & 0xf] | pc2bytes3[(left >>> 16) & 0xf] | pc2bytes4[(left >>> 12) & 0xf] | pc2bytes5[(left >>> 8) & 0xf] | pc2bytes6[(left >>> 4) & 0xf];
	                righttemp = pc2bytes7[right >>> 28] | pc2bytes8[(right >>> 24) & 0xf] | pc2bytes9[(right >>> 20) & 0xf] | pc2bytes10[(right >>> 16) & 0xf] | pc2bytes11[(right >>> 12) & 0xf] | pc2bytes12[(right >>> 8) & 0xf] | pc2bytes13[(right >>> 4) & 0xf];
	                temp = ((righttemp >>> 16) ^ lefttemp) & 0x0000ffff;
	                keys[n++] = lefttemp ^ temp;
	                keys[n++] = righttemp ^ (temp << 16)
	            }
	        }
	        return keys
	    }

	    //var pswDfVal=$('.psw-text')[0].defaultValue;
	    $('.psw-text').focus(function () {
	        if (this.defaultValue == this.value) {
	            $(this).hide().val('');
	            $('#txtPassword').show();
	            $(this).parent().find('.mes-tip').css({
	                'visibility': 'visible'
	            });
	            $(this).parent().find('.psw-psw').show().focus().css({
	                'color': '#666'
	            });

	        } else {
	            $(this).parent().find('.mes-tip').css({
	                'visibility': 'visible'
	            });
	            $(this).hide().val('');
	            $('#txtPassword').show();
	        }
	    })
	</script>
</body></html>