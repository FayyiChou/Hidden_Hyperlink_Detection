<!DOCTYPE html>
<html>
 <head> 
  <meta http-equiv="content-type" content="text/html;charset=utf-8" /> 
  <title>Spring框架AOP源码剖析_Spring_Java-ITnose</title> 
  <meta name="keywords" content="Spring框架AOP源码剖析" /> 
  <meta name="description" content="Spring框架AOP源码剖析" /> 
  <link rel="stylesheet" type="text/css" href="/cssfile/detail.css" /> 
  <script type="text/javascript" src="/Scripts/jquery.js"></script> 
  <!--[if lte IE 8]><script>(function(){ var e="abbr,article,aside,audio,canvas,datalist,details,dialog,eventsource,figure,footer,header,hgroup,mark,menu,meter,nav,output,progress,section,time,video".split(","),i=e.length;while(i--){document.createElement(e[i])}})();</script><![endif]--> 
 </head> 
 <body class="body-slei-center"> 
  <div class="line"> 
   <div id="userbar" class="userbar"> 
    <ul class="main-list"> 
     <li></li> 
    </ul> 
   </div> 
  </div> 
  <header id="header" class="container"> 
   <div id="top-box-slei" class="top-box-slei line pt-20"> 
    <a class="logo" href="/" title="logo"></a> 
    <ul class="channel"></ul> 
    <form action="/s.do" method="get" class="search-form"> 
     <div class="box"> 
      <span class="top-box-slei-bg"></span> 
      <input class="hdi" id="itnosekw" maxlength="256" tabindex="1" size="46" name="kw" value="" /> 
      <span class="btn-wrap"><input type="submit" tabindex="2" value="搜索文章" class="btn-global" /></span> 
     </div> 
    </form> 
   </div> 
  </header> 
  <div id="body" class="container"> 
   <div id="menu" class="menu"> 
    <ul> 
     <li class="current ml-10"><a href="/"> 首页 </a></li> 
     <li><a href="/type/1.html">J2SE</a></li> 
     <li><a href="/type/2.html">JavaEclipse</a></li> 
     <li><a href="/type/3.html">J2EE</a></li> 
     <li><a href="/type/4.html">jsp</a></li> 
     <li><a href="/type/6.html">Hibernate</a></li> 
     <li><a href="/type/7.html"><font color="#FFFF00">Spring</font></a></li> 
     <li><a href="/type/8.html">JAVA程序员</a></li> 
     <li><a href="/type/9.html">EJB</a></li> 
     <li><a href="/type/10.html">JAVA基础类</a></li> 
     <li><a href="/type/11.html">JavaWeb</a></li> 
     <li><a href="/type/12.html">J2ME</a></li> 
     <li><a href="/type/13.html">java其它相关</a></li> 
     <li><a href="/type/114.html">struts</a></li> 
     <li><a href="/type/141.html">NetBeans</a></li> 
     <li><a href="/type/165.html">JFinal</a></li> 
     <li><a href="/type/154.html">Mybatis</a></li> 
     <li><a href="/type/146.html">TeamCity</a></li> 
     <li><a href="/type/147.html">Maven</a></li> 
     <li><a href="/type/150.html">HibernateSearch</a></li> 
     <li><a href="/type/117.html">Tomcat</a></li> 
     <li><a href="/type/178.html">Netty</a></li> 
     <li><a href="/type/180.html">Jetty</a></li> 
    </ul> 
   </div> 
   <div style="margin-top:10px;border: 1px solid #CCC;background-color: #FFF;width: 1088px;padding:5px 5px 0px 5px;height:100px"> 
    <script type="text/javascript">
    var cpro_id = "u1737258";
</script> 
    <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
   </div> 
   <div> 
    <div> 
     <nav> 
      <a href="/">ITnose首页</a> &gt; 
      <a href="/union/1.html">Java</a> &gt; 
      <a href="/type/7.html">Spring</a> &gt; 
     </nav> 
    </div> 
    <section class="line qb-section"> 
     <article class="grid qb-content" id="qb-content"> 
      <div class="wgt-ask" style="background-color:#FFF;"> 
       <h1 class="title"> <span class="title"><a href="/detail/6504139.html">Spring框架AOP源码剖析</a></span> </h1> 
       <div class="line f-aid mb-10"> 
        <span class="grid-r ask-time">2016-05-14 14:47</span> 
        <div class="bdsharebuttonbox">
         <a href="#" class="bds_more" data-cmd="more"></a>
         <a title="分享到QQ空间" href="#" class="bds_qzone" data-cmd="qzone"></a>
         <a title="分享到新浪微博" href="#" class="bds_tsina" data-cmd="tsina"></a>
         <a title="分享到腾讯微博" href="#" class="bds_tqq" data-cmd="tqq"></a>
         <a title="分享到人人网" href="#" class="bds_renren" data-cmd="renren"></a>
         <a title="分享到微信" href="#" class="bds_weixin" data-cmd="weixin"></a>
        </div> 
        <script>window._bd_share_config={"common":{"bdSnsKey":{},"bdText":"","bdMini":"2","bdMiniList":false,"bdPic":"","bdStyle":"0","bdSize":"16"},"share":{}};with(document)0[(getElementsByTagName('head')[0]||body).appendChild(createElement('script')).src='http://bdimg.share.baidu.com/static/api/js/share.js?v=89860593.js?cdnversion='+~(-new Date()/36e5)];</script> 
       </div> 
       <div class="bd line mt-10 q-content"> 
        <div class="sycode"> 
         <div class="sycode"> 
          <p> 今天我要和大家分享的是 AOP（Aspect-Oriented Programming）这个东西的源码剖析，作为多年的开发者，想必大家在面试的时候都被问过，你知道Spring框架AOP的底层实现机制吗，这可是很简单的噢，我们会说，如果某个类有接口就使用JDK动态代理，没有接口就用CGLIB动态代理，并且Spring也提供了可配置开关，不管有无接口都一律使用CGLIB动态代理，例如</p> 
          <p> </p> 
          <pre name="code" class="sycode">&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;/&gt;</pre> 
          <br /> 
          <pre name="code" class="sycode">&lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; proxy-target-class=&quot;true&quot;/&gt;</pre> 
          <p><br /> </p> 
          <p> 默认都是false，也就是使用JDK动态代理，但是如果没有接口也还是会使用CGLIB动态代理的，当然啦，这里设为了true，也就是在任何情况下都只使用CGLIB动态代理，但是你是否真正想过，Spring的底层是如何控制该用哪个动态代理的</p> 
          <p> 那我们如何用Spring实现一个CGLIB动态代理呢（Spring框架AOP实现用到的net.sf.cglib并不是直接使用），而是对其相关API做了封装，</p> 
          <p> 我们可以看如下的例子了解</p> 
          <p> </p> 
          <pre name="code" class="sycode">package com.somnus.aop.framework;
public class HelloImpl{
    public void say(String name) {
        System.out.println(&quot;Hello! &quot; + name);
    }
}</pre> 
          <pre name="code" class="sycode">package com.somnus.aop.framework;
import java.io.Serializable;
import java.lang.reflect.Method;
import org.springframework.cglib.proxy.Enhancer;
import org.springframework.cglib.proxy.MethodInterceptor;
import org.springframework.cglib.proxy.MethodProxy;
public class CglibProxy implements Serializable {
	private static final long serialVersionUID = 1L;
	public Object getProxy(Object target) {
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(target.getClass());
		enhancer.setCallback(new Handler());
		enhancer.setClassLoader(target.getClass().getClassLoader());
		return enhancer.create();
	}
	public Object getProxy(Class&lt;?&gt; clazz){
		Enhancer enhancer = new Enhancer();
		enhancer.setSuperclass(clazz);
        enhancer.setCallback(new Handler());
        enhancer.setInterfaces(new Class[] { Serializable.class });
        return enhancer.create();
	}
	public static class Handler implements MethodInterceptor{
	    private void doBefore() {
	        System.out.println(&quot;before method invoke&quot;);
	    }
	    private void doAfter() {
	        System.out.println(&quot;after method invoke&quot;);
	    }
		@Override
		public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {
			try {
	            // 调用之前
	            doBefore();
	            // 调用原始对象的方法
	            Object result = proxy.invokeSuper(obj, args);
	            // 调用之后
	            doAfter();
	            return result;
	        } catch (Throwable e) {
	            throw e;
	        }
		}
	}
}</pre> 
          <pre name="code" class="sycode">package com.somnus.aop.framework;
public class CglibClient {
	public static void main(String[] args) {
	    CglibProxy cglib = new CglibProxy();
	    HelloImpl proxy = (HelloImpl)cglib.getProxy(new HelloImpl());
		proxy.say(&quot;Somnus&quot;);
		System.out.println(&quot;*****************************************************************&quot;);
		HelloImpl proxy2 = (HelloImpl)cglib.getProxy(HelloImpl.class);
		proxy2.say(&quot;Somnus&quot;);
	}
}</pre> 
          <br /> 是否似曾相似呢，和CGLIB对比，可是仔细看API的包名，却发现并不是 
          <br /> 
          <pre name="code" class="sycode">import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.proxy.MethodProxy;</pre> 
          <br /> 
          <p>但我可以很负责任的告诉你，Spring只是对它们做了封装，因为随后说到的Spring在用到CGLIB动态代理都是用到自己的封装类。</p> 
          <p> 现在我抛砖引玉，用Spring框架的AOP做一个前置通知、后置通知，分别用xml配置的方式和编程式</p> 
          <p> 先提供要用到的接口和实现类</p> 
          <p> </p> 
          <pre name="code" class="sycode">public interface GreetingInterface {
    String sayHello(String name);
}</pre> 
          <br /> 
          <pre name="code" class="sycode">public class GreetingImpl implements GreetingInterface {
    @Override
    public String sayHello(String name) {
        System.out.println(&quot;Hello! &quot; + name);
        return name;
    }
}</pre> 
          <p></p> 
          <p> a：编程式</p> 
          <p> </p> 
          <pre name="code" class="sycode">package com.somnus.aop;
import java.lang.reflect.Method;
import java.util.Arrays;
import org.springframework.aop.MethodBeforeAdvice;
public class GreetingBeforeAdvice implements MethodBeforeAdvice{
    @Override
    public void before(Method method, Object[] args, Object target) throws Throwable {
        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Before Start&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);
        System.out.println(&quot;Method Name: &quot; + method.getName());
        System.out.println(&quot;args:&quot; + Arrays.toString(args));
        System.out.println(&quot;Target : &quot; + target.getClass().getName());
        System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;Before End&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);
    }
}</pre> 
          <pre name="code" class="sycode">package com.somnus.aop;
import java.lang.reflect.Method;
import java.util.Arrays;
import org.springframework.aop.AfterReturningAdvice;
public class GreetingAfterAdvice implements AfterReturningAdvice {
    @Override
    public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {
        System.out.println(&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;After Start&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;);
        System.out.println(&quot;returnValue:&quot; + returnValue);
        System.out.println(&quot;Method Name: &quot; + method.getName());
        System.out.println(&quot;args:&quot; + Arrays.toString(args));
        System.out.println(&quot;Target : &quot; + target.getClass().getName());
        System.out.println(&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;After End&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&quot;);
    }
}</pre> 
          <pre name="code" class="sycode">package com.somnus.aop;
import org.springframework.aop.framework.ProxyFactory;
public class BeforeAndAfterClient {
    public static void main(String[] args) {
        ProxyFactory proxyFactory = new ProxyFactory();     // 创建代理工厂
        proxyFactory.setTarget(new GreetingImpl());         // 射入目标类对象
        proxyFactory.addAdvice(new GreetingBeforeAdvice()); // 添加前置增强
        proxyFactory.addAdvice(new GreetingAfterAdvice());  // 添加后置增强 
 
        GreetingInterface greeting = (GreetingInterface) proxyFactory.getProxy(); // 从代理工厂中获取代理
        greeting.sayHello(&quot;Jack&quot;);                              // 调用代理的方法
    }
}</pre> 
          <p></p> 
          <p>上面曾说到过可设置是否强制使用CGLIB动态代理开关，如果采用这种方式将怎么做<br /> </p> 
          <p> </p> 
          <pre name="code" class="sycode">proxyFactory.setOptimize(true);</pre> 
          <br /> b:XML配置形式 
          <br /> 
          <br /> 
          <pre name="code" class="sycode">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
	xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
	xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    &lt;bean id=&quot;greetingImpl&quot; class=&quot;com.somnus.xml.aop.GreetingImpl&quot;&gt;&lt;/bean&gt;
    &lt;!-- 配置一个代理 --&gt;
    &lt;bean id=&quot;greetingProxy&quot; class=&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;&gt;
        &lt;property name=&quot;interfaces&quot; value=&quot;com.somnus.xml.aop.GreetingInterface&quot;/&gt; 	&lt;!-- 需要代理的接口 --&gt;
        &lt;property name=&quot;target&quot; ref=&quot;greetingImpl&quot;/&gt;  								&lt;!-- 目标接口实现类 --&gt;
        &lt;property name=&quot;interceptorNames&quot;&gt;        &lt;!-- 拦截器名称（也就是增强类名称，Spring Bean 的 id） --&gt;
            &lt;list&gt;
                &lt;value&gt;greetingBeforeAdvice&lt;/value&gt;
                &lt;value&gt;greetingAfterReturningAdvice&lt;/value&gt;
            &lt;/list&gt;
        &lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</pre> 
          <p>XML配置强制使用CGLIB动态代理开关，应加上</p> 
          <p> &lt;property name=&quot;optimize&quot; value=&quot;true&quot;/&gt;<br /> </p> 
          <pre name="code" class="sycode">package com.somnus.xml.aop;
import org.junit.Test;
import com.somnus.AbstractTestSupport;
import com.somnus.ApplicationContextHolder;
public class SpringTest extends AbstractTestSupport {
	@Test
	public void save(){
	    /**从 Context 中根据 id 获取 Bean 对象（其实就是一个代理）*/
	    GreetingInterface greeting = (GreetingInterface) ApplicationContextHolder.getBean(&quot;greetingProxy&quot;); 
	    greeting.sayHello(&quot;Jack&quot;); 
	}
}</pre> 
          <br /> 其实无论是何种实现方式，它们最终要做的都是动态代理，也许用JDK动态代理，也许用CGLIB动态代理，至于它们是何种关系，可参考我下面给的类图 
          <br /> 
          <p></p> 
          <p> <img src="http://www.itnose.net/img/20160514/10711143.png" alt="Spring框架AOP源码剖析0" /><br /> </p> 
          <p> 在上面结构图中与标准的策略模式结构稍微有点不同，这里抽象策略是 AopProxy 接口，Cglib2AopProxy 和 JdkDynamicAopProxy 分别代表两种策略的实现方式，DefaultAopProxyFactory就是代表Context 角色 ，它根据条件选择使用 Jdk 代理方式还是 CGLIB 方式，而另外三个类主要是来负责创建具体策略对象，ProxyFactoryBean 是通过依赖的方法来关联具体策略对象的，它是通过调用策略对象的getProxy (ClassLoaderclassLoader)方法来完成操作。&nbsp;<br /> </p> 
          <p> 我们看下DefaultAopProxyFactory这个类的源码</p> 
          <p> <img src="http://www.itnose.net/img/20160514/10711144.png" alt="Spring框架AOP源码剖析1" /><br /> </p> 
          <p> ProxyCreatorSupport类负责创建AopProxy对象，当然就是它调用createAopProxy方法，看代码</p> 
          <p> <img src="http://www.itnose.net/img/20160514/10711145.png" alt="Spring框架AOP源码剖析2" /><br /> </p> 
          <p> <br /> </p> 
          <p> this代表谁呢，看到我给的类图，ProxyFactory、ProxyFactoryBean可都是继承ProxyCreatorSupport的，那在我们刚才的demo中似乎都看到了都对ProxyFactory、ProxyFactoryBean做了什么吧，注入了诸如接口、目标类、通知（拦截器）的东西，你可以最后这些东西都被利用起来了，承担它们本承担的责任。</p> 
          <p> <br /> </p> 
          <p> 最后我们再讲下JDK动态代理，在AOP中是如何工作的</p> 
          <p> </p> 
          <p> 首先我们必须先了解的动态代理的原理，因为 AOP 就是基于动态代理实现的。动态代理还要从 JDK 本身说起。&nbsp;在 Jdk 的 java.lang.reflect 包下有个 Proxy 类，它正是构造代理类的入口。这个类的结构入下：&nbsp;</p> 
          <p> <img src="http://www.itnose.net/img/20160514/10711146.png" alt="Spring框架AOP源码剖析3" /><br /> </p> 
          <p> 从上图发现只有四个是公有方法。而最后一个方法 newProxyInstance 就是创建代理对象的方法。这个方法的源码如下<br /> </p> 
          <p> </p> 
          <pre name="code" class="sycode">public static Object newProxyInstance(ClassLoader loader,
                                          Class&lt;?&gt;[] interfaces,
                                          InvocationHandler h)throws IllegalArgumentException{
//具体实现，我这里省略，你可以去翻看源码
}</pre> 这个方法需要三个参数：ClassLoader，用于加载代理类的 Loader 类，通常这个 Loader 和被代理的类是同一个 Loader 类。Interfaces，是要被代理的那些那些接口。InvocationHandler，就是用于执行 除了被代理接口中方法之外的用户自定义的操作，他也是用户需要代理的最终目的。用户调用目标方法都被代理到 InvocationHandler 类中定义的唯一方法 invoke 中。这在后面再详解。&nbsp;下面还是看看 Proxy 如何产生代理类的过程，它构造出来的代理类到底是什么样子？下面揭晓啦。&nbsp; 
          <br /> 
          <img src="http://www.itnose.net/img/20160514/10711147.png" alt="Spring框架AOP源码剖析4" /> 
          <br /> 
          <p></p> 
          <p> 其实从上图中可以发现正在构造代理类的是在 ProxyGenerator 的 generateProxyClass 的方法中。ProxyGenerator 类在 sun.misc 包下，感兴趣的话可以看看它的源码。&nbsp;</p> 
          <p> <br /> </p> 
          <div class="sycode">
            从前面代理的原理我们知道，代理的目的是调用目标方法时我们可以转而执行 InvocationHandler 类的 invoke 方法，所以如何在 InvocationHandler 上做文章就是 Spring 实现 Aop 的关键所在。&nbsp;Spring 的 Aop 实现是遵守 Aop 联盟的约定。同时 Spring 又扩展了它，增加了如 Pointcut、Advisor等一些接口使得更加灵活 
           <br /> 
          </div> 
          <div class="sycode"> 
           <br /> 
          </div> 
          <div class="sycode">
            下面是 Jdk 动态代理的类图：&nbsp; 
          </div> 
          <br /> 
          <p></p> 
          <div class="sycode"> 
           <br /> 
          </div> 
          <div class="sycode"> 
           <img src="http://www.itnose.net/img/20160514/10711148.png" alt="Spring框架AOP源码剖析5" /> 
           <br /> 
          </div> 
          <div class="sycode">
            &nbsp; 下面看看 Spring 如何完成了代理以及是如何调用拦截器的。&nbsp;前面提到 Spring Aop 也是实现其自身的扩展点来完成这个特性的，从这个代理类可以看出它正是继承了 Factory Bean 的 ProxyFactoryBean，FactoryBean 之所以特别就在它可以让你自定义对象的创建 方法。当然代理对象要通过 Proxy 类来动态生成。&nbsp;下面是 Spring 创建的代理对象的时序图： 
           <br /> 
          </div> 
          <img src="http://www.itnose.net/img/20160514/10711149.png" alt="Spring框架AOP源码剖析6" /> 
          <br /> 
          <p> Spring 创建了代理对象后，当你调用目标对象上的方法时，将都会被代理到 InvocationHandler 类的invoke 方法中执行，这在前面已经解释。在这里 JdkDynamicAopProxy 类实现了 InvocationHandler 接 口。&nbsp;下面再看看 Spring 是如何调用拦截器的，下面是这个过程的时序图：&nbsp;<br /> </p> 
          <p> <img src="http://www.itnose.net/img/20160514/10711150.png" alt="Spring框架AOP源码剖析7" /><br /> </p> 
          <p> 以上所说的都是 Jdk 动态代理，CGLIB动态代理源码，如果你感兴趣，也可以去翻翻CglibAopProxy这个类<br /> </p> 
          <div class="sycode"> 
           <br /> 
          </div> 
         </div> 
        </div> 
        <div class="contentDown2"> 
         <div id="gg" style="float:left;width:300px;margin:5px;"> 
          <script type="text/javascript">
var cpro_id="u2064564";
(window["cproStyleApi"] = window["cproStyleApi"] || {})[cpro_id]={at:"3",rsi0:"300",rsi1:"250",pat:"17",tn:"baiduCustNativeAD",rss1:"#FFFFFF",conBW:"1",adp:"1",ptt:"0",titFF:"%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91",titFS:"14",rss2:"#000000",titSU:"0"}
</script> 
          <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
         </div> 
        </div> 
        <div style="text-align:center;margin-top:5px"> 
         <script type="text/javascript">
var cpro_id="u2057855";
(window["cproStyleApi"] = window["cproStyleApi"] || {})[cpro_id]={at:"3",rsi0:"739",rsi1:"250",pat:"6",tn:"baiduCustNativeAD",rss1:"#FBFBFB",conBW:"1",adp:"1",ptt:"0",titFF:"%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91",titFS:"13",rss2:"#000000",titSU:"0",ptbg:"90",piw:"0",pih:"0",ptp:"0"}
</script> 
         <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
        </div> 
        <div id="fenxiang">
         <span style="color:#aaaaaa" id="originUrl"></span>
        </div> 
       </div> 
      </div> 
      <div class="wgt-relate-search mt-5 mb-5"> 
       <h2>相关搜索：</h2> 
       <a href="/s/spring%20aop.html" target="_blank">spring aop</a> 
       <a href="/s/spring%e6%ba%90%e7%a0%81.html" target="_blank">spring源码</a> 
       <a href="/s/spring%20aop%20%e8%af%a6%e8%a7%a3.html" target="_blank">spring aop 详解</a> 
       <a href="/s/spring%20aop%20%e4%be%8b%e5%ad%90.html" target="_blank">spring aop 例子</a> 
       <a href="/s/spring%20aop%e9%85%8d%e7%bd%ae.html" target="_blank">spring aop配置</a> 
      </div> 
      <div class="wgt-related mt-5 " id="wgt-related"> 
       <h2>相关文章</h2> 
       <div class="leftlist"> 
        <ul> 
         <li><span class="grid-r tm">2016-03-29 21:53</span> <a href="/detail/6478477.html"> Spring源码(二)-AOP </a> </li> 
         <li><span class="grid-r tm">2014-02-05 12:48</span> <a href="/detail/514425.html"> spring AoP学习 -----AoP织入器ProxyFactory剖析 </a> </li> 
         <li><span class="grid-r tm">2017-03-11 09:23</span> <a href="/detail/6730060.html"> spring源码解读 AOP原理 </a> </li> 
         <li><span class="grid-r tm">2015-01-18 23:44</span> <a href="/detail/6195000.html"> Spring Framework源码（六）：Spring AOP之解析标签 </a> </li> 
         <li><span class="grid-r tm">2014-02-08 11:04</span> <a href="/detail/527752.html"> AOP实现(二)---Spring框架中的AOP应用 </a> </li> 
        </ul> 
       </div> 
       <div class="mt-10"> 
        <a href="/st/6504139.html"> 更多相关文章&gt;&gt; </a> 
       </div> 
      </div> 
      <div class="wgt-related mt-5 " id="wgt-related"> 
       <h2>最新文章</h2> 
       <div class="leftlist"> 
        <ul> 
         <li><span class="grid-r tm">2017-03-26 22:36</span> <a href="/detail/6736146.html"> Spring boot监控初探 </a> </li> 
         <li><span class="grid-r tm">2017-03-26 14:33</span> <a href="/detail/6736018.html"> springMVC相关知识点 </a> </li> 
         <li><span class="grid-r tm">2017-03-26 14:33</span> <a href="/detail/6736009.html"> Spring的注解 </a> </li> 
         <li><span class="grid-r tm">2017-03-26 14:33</span> <a href="/detail/6736008.html"> Spring定时任务配置 </a> </li> 
         <li><span class="grid-r tm">2017-03-26 12:00</span> <a href="/detail/6735944.html"> 看起来很长但还是有用的Spring学习笔记 </a> </li> 
        </ul> 
       </div> 
       <div class="mt-10"> 
        <a href="/type/7.html"> 更多最新文章&gt;&gt; </a> 
       </div> 
      </div> 
     </article> 
     <aside class="grid qb-side" id="qb-side"> 
      <div class="cms-slide"> 
       <div class="remen"> 
        <p class="h2">热门搜索</p> 
        <ul> 
         <li><a href="/s/spring%20aop%e4%be%8b%e5%ad%90.html" target="_blank">spring aop例子</a></li> 
         <li><a href="/s/spring%20aop%e6%98%af%e4%bb%80%e4%b9%88.html" target="_blank">spring aop是什么</a></li> 
         <li><a href="/s/spring%e7%9a%84aop.html" target="_blank">spring的aop</a></li> 
         <li><a href="/s/spring%20aop%e6%a6%82%e5%bf%b5.html" target="_blank">spring aop概念</a></li> 
         <li><a href="/s/spring%20aop%e5%ae%9e%e7%8e%b0%e5%8e%9f%e7%90%86.html" target="_blank">spring aop实现原理</a></li> 
         <li><a href="/s/spring%20aop%e9%85%8d%e7%bd%ae%e4%ba%8b%e5%8a%a1.html" target="_blank">spring aop配置事务</a></li> 
         <li><a href="/s/spring%20aop%e6%97%a5%e5%bf%97.html" target="_blank">spring aop日志</a></li> 
         <li><a href="/s/spring%20aop%e6%97%a5%e5%bf%97%e7%ae%a1%e7%90%86.html" target="_blank">spring aop日志管理</a></li> 
         <li><a href="/s/spring%e6%a1%86%e6%9e%b6.html" target="_blank">spring框架</a></li> 
         <li><a href="/s/spring%20%e6%a1%86%e6%9e%b6.html" target="_blank">spring 框架</a></li> 
         <li><a href="/s/spring%e6%ba%90%e7%a0%81%e4%b8%8b%e8%bd%bd.html" target="_blank">spring源码下载</a></li> 
         <li><a href="/s/spring%e6%ba%90%e7%a0%81%e6%b7%b1%e5%ba%a6%e8%a7%a3%e6%9e%90.html" target="_blank">spring源码深度解析</a></li> 
         <li><a href="/s/spring%20aop%20%e8%bf%94%e5%9b%9e%e5%80%bc.html" target="_blank">spring aop 返回值</a></li> 
         <li><a href="/s/spring%e4%b8%adioc%e5%92%8caop.html" target="_blank">spring中ioc和aop</a></li> 
         <li><a href="/s/spring%e6%a1%86%e6%9e%b6%e6%90%ad%e5%bb%ba.html" target="_blank">spring框架搭建</a></li> 
        </ul> 
       </div> 
      </div> 
      <div class="cms-slide"> 
       <script type="text/javascript">
var cpro_id="u2062662";
(window["cproStyleApi"] = window["cproStyleApi"] || {})[cpro_id]={at:"3",rsi0:"300",rsi1:"280",pat:"17",tn:"baiduCustNativeAD",rss1:"#FFFFFF",conBW:"1",adp:"1",ptt:"1",ptc:"%E7%8C%9C%E4%BD%A0%E6%84%9F%E5%85%B4%E8%B6%A3",ptFS:"14",ptFC:"#000000",ptBC:"#F2F2F2",titFF:"%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91",titFS:"12",rss2:"#000000",titSU:"0"}
</script> 
       <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
      </div> 
      <div class="cms-slide" id="tuijian"></div> 
      <div class="fixed"> 
       <div class="cms-slide"> 
        <script type="text/javascript">
    var cpro_id = "u2062674";
</script> 
        <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
       </div> 
       <div class="cms-slide"> 
        <script type="text/javascript">
var cpro_id="u1983378";
(window["cproStyleApi"] = window["cproStyleApi"] || {})[cpro_id]={at:"3",rsi0:"300",rsi1:"250",pat:"6",tn:"baiduCustNativeAD",rss1:"#FFFFFF",conBW:"1",adp:"1",ptt:"0",titFF:"%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91",titFS:"13",rss2:"#333333",titSU:"0",ptbg:"90",piw:"0",pih:"0",ptp:"0"}
</script> 
        <script src="http://cpro.baidustatic.com/cpro/ui/c.js" type="text/javascript"></script> 
       </div> 
      </div> 
     </aside> 
    </section> 
   </div> 
   <footer id="footer">
    <p>京ICP备14022385号-2</p>
    <p>&copy;2014 <a href="/">ITnose软件编程教程</a>&nbsp;|&nbsp;联系我们：Email：twobrushes@126.com &nbsp;&nbsp;QQ:35155868</p>
    <p style="display:none"><script language="javascript" type="text/javascript" src="http://js.users.51.la/16757612.js"></script><script type="text/javascript">var cnzz_protocol = (("https:" == document.location.protocol) ? " https://" : " http://");document.write(unescape("%3Cspan id='cnzz_stat_icon_1258921346'%3E%3C/span%3E%3Cscript src='" + cnzz_protocol + "s95.cnzz.com/z_stat.php%3Fid%3D1258921346%26show%3Dpic' type='text/javascript'%3E%3C/script%3E"));</script></p>
   </footer> 
  </div> 
  <script>
$(document).ready(function(e) {			
	t = $('.fixed').offset().top;
	mh = $('article').height();
	mt = $('article').offset().top;
	fh = $('.fixed').height();
	$(window).scroll(function(e){
		s = $(document).scrollTop();	
		if(s > t-1){
			$('.fixed').css('position','fixed');
			if(s + fh > mh+mt){
				$('.fixed').css('top',mh+mt-s-fh+'px');	
			}else{
				$('.fixed').css('top',mh-s+'px');
				$('.fixed').offset({top:s});
			}				
		}else{
			$('.fixed').css('position','');
		}
	})
});
var tuijiandoc='<div class="cms-inner"><p class="h2 ml-5">推荐文章</p><ul class="ml-5" ><li ><a href="/detail/6478477.html"> Spring源码(二)-AOP</a></li><li ><a href="/detail/514425.html"> spring AoP学习 -----AoP织入器ProxyFactory剖析</a></li><li ><a href="/detail/6730060.html"> spring源码解读 AOP原理</a></li><li ><a href="/detail/6195000.html"> Spring Framework源码（六）：Spring AOP之解析标签</a></li><li ><a href="/detail/527752.html"> AOP实现(二)---Spring框架中的AOP应用</a></li><li ><a href="/detail/6362353.html"> 【spring框架】(三)面向切面编程（AOP）</a></li><li ><a href="/detail/6227761.html"> java架构解密--Spring框架的AOP</a></li><li ><a href="/detail/6224532.html"> 实现类似Spring的可配置的AOP框架</a></li></ul></div>';
document.getElementById("tuijian").innerHTML=tuijiandoc;
//document.getElementById("originUrl").innerHTML="From : http://blog.csdn.net/lovesomnus/article/details/51404790";
var contentDown=$(tuijiandoc);
contentDown.find("p").html('<span class="h2">相关文章</span><span style="font-size:13px;float:right;padding-right:25px"><a href="/st/6504139.html">&lt;&lt;更多&gt;&gt;</a></span>').removeAttr("class").attr("style","border-bottom: 1px dashed #aaa;height:26px;margin-right:10px;margin-bottom:2px");
contentDown.find("ul").removeAttr("class");
contentDown.attr("class","contentDown");
$('.contentDown2').append(contentDown);
</script>  
 </body>
</html>