<!DOCTYPE html>
<html>
 <head lang="en"> 
  <meta charset="gb2312" /> 
  <title>DotNet加密方式解析：数字签名_清屏网_在线知识学习平台</title> 
  <meta http-equiv="X-UA-Compatible" content="IE=edge" /> 
  <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no" /> 
  <meta name="format-detection" content="telephone=no" /> 
  <meta name="renderer" content="webkit" /> 
  <meta http-equiv="Cache-Control" content="no-siteapp" /> 
  <link rel="alternate icon" type="image/png" href="assets/i/favicon.png" /> 
  <link rel="stylesheet" href="assets/css/amazeui.min.css" /> 
  <style>
			@media only screen and (min-width: 1200px) {
			      .blog-g-fixed {
			        max-width: 1200px;
			      }
			    }
			
			    @media only screen and (min-width: 641px) {
			      .blog-sidebar {
			        font-size: 1.4rem;
			      }
			    }
			
			    .blog-main {
			      padding: 20px 0;
			    }
			
			    .blog-title {
			      margin: 10px 0 20px 0;
			    }
			
			    .blog-meta {
			      font-size: 14px;
			      margin: 10px 0 20px 0;
			      color: #222;
			    }
			
			    .blog-meta a {
			      color: #27ae60;
			    }
			
			    .blog-pagination a {
			      font-size: 1.4rem;
			    }
			
			    .blog-team li {
			      padding: 4px;
			    }
			
			    .blog-team img {
			      margin-bottom: 0;
			    }
			
			    .blog-footer {
			      padding: 10px 0;
			      text-align: center;
			    }
		</style> 
 </head> 
 <body>
  <header class="am-topbar"> 
   <h1 class="am-topbar-brand"> <a href="index.php">清屏网移动版</a> </h1> 
   <button class="am-topbar-btn am-topbar-toggle am-btn am-btn-sm am-btn-success am-show-sm-only" data-am-collapse="{target: '#doc-topbar-collapse'}"><span class="am-sr-only">导航切换</span> <span class="am-icon-bars"></span> </button> 
   <div class="am-collapse am-topbar-collapse" id="doc-topbar-collapse"> 
    <ul class="am-nav am-nav-pills am-topbar-nav"> 
     <ul class="am-nav am-nav-pills am-topbar-nav"> 
      <li><a href="index.php">首页</a> </li>
      <li class="hover"><a href="list.php?tid=1" rel="dropmenu1"><span>电脑</span></a> </li> 
      <li><a href="list.php?tid=2" rel="dropmenu2"><span>手机</span></a> </li> 
      <li><a href="list.php?tid=5" rel="dropmenu5"><span>编程开发</span></a> </li> 
      <li><a href="list.php?tid=6" rel="dropmenu6"><span>软件编程</span></a> </li> 
      <li><a href="list.php?tid=7" rel="dropmenu7"><span>photoshop</span></a> </li> 
      <li><a href="list.php?tid=248" rel="dropmenu248"><span>建站</span></a> </li> 
      <li><a href="list.php?tid=60" rel="dropmenu60"><span>数据库</span></a> </li> 
      <li><a href="list.php?tid=73" rel="dropmenu73"><span>网页设计</span></a> </li> 
      <li><a href="list.php?tid=82" rel="dropmenu82"><span>脚本语言</span></a> </li> 
      <li><a href="list.php?tid=102" rel="dropmenu102"><span>生活</span></a> </li>
     </ul> 
    </ul> 
    <form class="am-topbar-form am-topbar-left am-form-inline am-topbar-right" role="search" action="/plus/search.php"> 
     <input type="hidden" name="mobile" value="1" /> 
     <input type="hidden" name="kwtype" value="0" /> 
     <div class="am-form-group"> 
      <input name="q" type="text" class="am-form-field am-input-sm" placeholder="输入关键词" /> 
     </div> 
     <button type="submit" class="am-btn am-btn-default am-btn-sm">搜索</button> 
    </form> 
   </div> 
  </header> 
  <div class="am-g am-g-fixed blog-g-fixed"> 
   <div class="am-u-md-8">
    <a href="index.php"></a> &gt; 
    <a href="list.php?tid=1">电脑</a> &gt; 
    <a href="list.php?tid=19">服务器</a> &gt; 
   </div> 
   <div class="am-u-md-8"> 
    <article class="blog-main"> 
     <h3 class="am-article-title blog-title"> DotNet加密方式解析：数字签名 </h3> 
     <h4 class="am-article-meta blog-meta"><small>时间:</small>2017-01-19 21:51&nbsp;&nbsp;<small>来源:</small>清屏网 &nbsp;&nbsp;<small>作者:</small>那一抹忧伤 &nbsp;&nbsp;<small>点击:</small><script src="/plus/count.php?view=yes&amp;aid=201745&amp;mid=1" type="text/javascript" language="javascript"></script>次</h4> 
     <div class="am-g blog-content" style="padding: 10px;"> 
      <table width="100%"> 
       <tbody>
        <tr> 
         <td><p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> <img class="alignCenter" src="/uploads/allimg/170119/2152551002-0.jpg" style="max-width: 96%; height: auto; vertical-align: middle; border: 0px none; margin: 0px auto 10px; text-align: center; display: block;" /></p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数据安全的相关技术在现在愈来愈变得重要，因为人们对于自身的信息都有一种保护的欲望，不想被人获取到自己的私密信息，加密几乎已经是这个时代的关键词了。在这个HTTPS盛行的时代，作为一个开发人员怎么可能不去了解和学习呢。这篇博文就来给大家简单介绍一个HTTPS在.NET种的应用和实现方法。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数字证书和数字签名的实现主要是基于非对称加密和数字摘要，数字签名是数字证书不可或缺的一部分。这篇博客主要讲解数字签名、数字证书，以及数字签名在.NET种的实现方法。</p> <h3 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 一.数字签名概述：</h3> <h4 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 27.2px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 16px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 1.数字签名的基本原理：</h4> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 这里首先来了解一些什么叫做数字签名，数字签名是附加在数据单元上的一些数据，或是对数据单元所做的密码变换。数字签名是对非对称加密和消息摘要的应用。数签名的原理：使用非对称密钥将签名函数添加到非对称算法，创建一个“签名”，另一方接收加密的信息，使用确认函数来验证签名。有如下图：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> <img class="alignCenter" src="/uploads/allimg/170119/2152551V1-1.png" style="max-width: 96%; height: auto; vertical-align: middle; border: 0px none; margin: 0px auto 10px; text-align: center; display: block;" /></p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 说明：用户A选择一个非对称签名算法创建一对新密钥，自己保留私钥，公钥发给B。用户B使用用户A的公钥来验证签名。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 将散列码做为创建数字签名，有如下图：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> <img class="alignCenter" src="/uploads/allimg/170119/2152555204-2.png" style="max-width: 96%; height: auto; vertical-align: middle; border: 0px none; margin: 0px auto 10px; text-align: center; display: block;" /></p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 将散列码作为确认一个数字签名，有如下图：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> <img class="alignCenter" src="/uploads/allimg/170119/21525513Z-3.png" style="max-width: 96%; height: auto; vertical-align: middle; border: 0px none; margin: 0px auto 10px; text-align: center; display: block;" /></p> <h4 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 27.2px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 16px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 2.数字签名的特点：</h4> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 第三方不能伪造用户A的数字签名；第三方不能重新使用用户A的数字签名；第三方不能改变签名后的文件；用户A无法否认自己的签名文件。数字签名能够提供一种和物理签名类似的合理机制。数字签名的安全性和加密的其他方面是一样的，他们都是基于可能的有效密钥管理的。数字签名只采用了非对称密钥加密算法，能保证发送信息的完整性、身份认证和不可以否认行，数字加密采用了对称密钥加密算法和非对称密钥加密算法相结合的方法，能够保证发送信息的保密性。</p> <h3 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 二.数字证书概述：</h3> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 对于HTTPS（Hyper Text Transfer Protocol over Secure Socket Layer）很多开发人员都不会陌生，即使是普通用户也是比较的熟悉。数字证书（公钥证书）：用于电子信息活动中电子文件行为主体的验证和证明，并可实现电子文件保密性和完整性的电子数据。数字证书是一个经证书认证中心发行的证书。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数字证书：个人数字证书，单位数字证书、单位员工数字证书、服务器证书、VPN证书、WAP证书、代码签名证书和表单签名证书等。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数字证书是一个经证书授权重心数字签名的包含公开密钥拥有者信息以及公开密钥的文件，最简单的证书包含一个公开密钥、名称一剂证书授权中心的数字签名。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数字证书的特点：信息的保密性；交易者身份的确定性；不可否认性、不可修改性。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 数字证书的三种保存形式：带有私钥的证书；二进制编码的证书；Base64编码证书。</p> <h3 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 三.DotNet数字签名核心对象解析：</h3> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 在.NET中包含两种支持数字签名的非对称算法：RSA算法（为两种数据加密和数字签名定义了函数）；DSA算法（支持数字签名，不支持数据加密）。在.NET中使用RSA算法进行数字签名使用RSACryptoServiceProvider类，使用DSA进行数字签名的四个核心类如下图：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> <img class="alignCenter" src="/uploads/allimg/170119/2152554126-4.png" style="max-width: 96%; height: auto; vertical-align: middle; border: 0px none; margin: 0px auto 10px; text-align: center; display: block;" /></p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> DSA类：数字签名算法DSA的基类；DSACryptoServiceProvider类：定义访问DSA算法的加密服务提供程序实现的包装对象；DSASignatureDeformatter类：验证DSA签名；DSASignatureFormatter类：创建DSA签名；</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 接下来我们具体了解一下这些类：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 1.RSACryptoServiceProvider类：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (1).SignData()方法：使用指定的哈希算法计算指定输入流的哈希值，并对计算所得的哈希值签名。</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
<span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">SignData</span>(<span class="hljs-params">Stream inputStream, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span> halg</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span> calgHash = Utils.ObjToAlgId(halg, OidGroup.HashAlgorithm);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">return</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.SignHash(Utils.ObjToHashAlgorithm(halg).ComputeHash(inputStream), calgHash);
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法存在三个重载方法，三个重载方法的第一个参数不同，分别是Stream、byte[]两个类型。由代码可以看出，该方法接受两个参数，inputStream是要计算其哈希值的输入数据，halg用于创建哈希值的哈希算法。SignHash()通过用私钥对其进行加密来计算指定哈希值的签名。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (2).VerifyData()：通过使用提供的公钥确定签名中的哈希值并将其与所提供数据的哈希值进行比较验证数字签名是否有效。</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
 <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">bool</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">VerifyData</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] buffer, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span> halg, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] signature</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span> calgHash = Utils.ObjToAlgId(halg, OidGroup.HashAlgorithm);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">return</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.VerifyHash(Utils.ObjToHashAlgorithm(halg).ComputeHash(buffer), calgHash, signature);
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法没有重载版本，有源码可以看出该方法接收三个参数，分别是：buffer已签名的数据，halg用于创建数据的哈希值的哈希算法名称，signature要验证的签名数据。该方法返回一个布尔类型，如果签名有效，则为 true；否则为 false。VerifyHash()通过使用提供的公钥确定签名中的哈希值并将其与提供的哈希值进行比较来验证数字签名是否有效。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 2.DSA类解析：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (1).CreateSignature()：创建指定数据的 Cryptography.DSA 签名。</p> <pre class="hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 0.75em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
 <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">abstract</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">CreateSignature</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbHash</span>)</span>;
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法为一个抽象方法，在派生类中重写，接受一个字节数组表示要签名的数据，返回指定数据的数字签名。在使用CreateSignature方法时，必须自己创建SHA-1散列码，返回一个用字节数组表示的DSA签名。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (2).VerifySignature()：验证指定数据的 Cryptography.DSA 签名。</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
<span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">abstract</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">bool</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">VerifySignature</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbHash, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbSignature</span>)</span>;
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法接受字符数组表示的SHA-1散列码和签名来验证。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 3.DSACryptoServiceProvider类解析：</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (1).ImportParameters()：导入指定的 DSAParameters。该方法接受一个参数，Cryptography.DSA的参数。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (2).VerifyData()：通过将指定的签名数据与为指定数据计算的签名进行比较来验证指定的签名数据。</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
 <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">bool</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">VerifyData</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbData, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbSignature</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">return</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.VerifyHash(<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>._sha1.ComputeHash(rgbData), (<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span>) <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>, rgbSignature);
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法接受两个参数，rgbData已签名的数据；rgbSignature要验证的签名数据，如果签名验证为有效，则为 true；否则，为 false。VerifyHash()通过将指定的签名数据与为指定哈希值计算的签名进行比较来验证指定的签名数据，我们看一下VerifyHash()的实现代码：</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
 <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">bool</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">VerifyHash</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbHash, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> str, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rgbSignature</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (rgbHash == <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> ArgumentNullException(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;rgbHash&quot;</span>);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (rgbSignature == <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> ArgumentNullException(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;rgbSignature&quot;</span>);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span> calgHash = X509Utils.NameOrOidToAlgId(str, OidGroup.HashAlgorithm);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (rgbHash.Length != <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>._sha1.HashSize / <span class="hljs-number" style="color: rgb(136, 0, 0);">8</span>)
      {
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> key = <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;Cryptography_InvalidHashSize&quot;</span>;
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span>[] objArray = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span>[<span class="hljs-number" style="color: rgb(136, 0, 0);">2</span>];
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span> index1 = <span class="hljs-number" style="color: rgb(136, 0, 0);">0</span>;
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> str1 = <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;SHA1&quot;</span>;
        objArray[index1] = (<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span>) str1;
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span> index2 = <span class="hljs-number" style="color: rgb(136, 0, 0);">1</span>;
        <span class="hljs-comment" style="color: rgb(136, 136, 136);">// ISSUE: variable of a boxed type</span>
        __Boxed&lt;<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">int</span>&gt; local = (ValueType) (<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>._sha1.HashSize / <span class="hljs-number" style="color: rgb(136, 0, 0);">8</span>);
        objArray[index2] = (<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span>) local;
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> CryptographicException(Environment.GetResourceString(key, objArray));
      }
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.GetKeyPair();
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">return</span> Utils.VerifySign(<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>._safeKeyHandle, <span class="hljs-number" style="color: rgb(136, 0, 0);">8704</span>, calgHash, rgbHash, rgbSignature);
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法接收三个参数，rgbHash要签名的数据的哈希值，str用于创建数据的哈希值的哈希算法名称，rgbSignature要验证的签名数据。</p> <h4 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 27.2px; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 16px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 4.X509Certificate类解析：</h4> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该类在System.Security.Cryptography.X509Certificates空间下，提供帮助你使用 X.509 v.3 证书的方法。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (1).LoadCertificateFromBlob()：加载证书：</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
<span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">private</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">void</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">LoadCertificateFromBlob</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] rawData, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span> password, X509KeyStorageFlags keyStorageFlags</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (rawData == <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span> || rawData.Length == <span class="hljs-number" style="color: rgb(136, 0, 0);">0</span>)
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> ArgumentException(Environment.GetResourceString(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;Arg_EmptyOrNullArray&quot;</span>), <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;rawData&quot;</span>);
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (X509Utils.MapContentType(X509Utils._QueryCertBlobType(rawData)) == X509ContentType.Pfx &amp;&amp; (keyStorageFlags &amp; X509KeyStorageFlags.PersistKeySet) == X509KeyStorageFlags.PersistKeySet)
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> KeyContainerPermission(KeyContainerPermissionFlags.Create).Demand();
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">uint</span> dwFlags = X509Utils.MapKeyStorageFlags(keyStorageFlags);
      IntPtr num = IntPtr.Zero;
      RuntimeHelpers.PrepareConstrainedRegions();
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">try</span>
      {
        num = X509Utils.PasswordToHGlobalUni(password);
        X509Utils._LoadCertFromBlob(rawData, num, dwFlags, (keyStorageFlags &amp; X509KeyStorageFlags.PersistKeySet) != X509KeyStorageFlags.DefaultKeySet, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">ref</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.m_safeCertContext);
      }
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">finally</span>
      {
        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (num != IntPtr.Zero)
          Marshal.ZeroFreeGlobalAllocUnicode(num);
      }
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法是X509Certificate类构造函数等几个方法加载证书的具体实现方法。</p> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> (2).Export()：使用指定的格式和密码将当前 X509Certificate对象导出到字节数组。</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
 <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">virtual</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">byte</span>[] <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">Export</span>(<span class="hljs-params">X509ContentType contentType, SecureString password</span>)
    </span>{
      <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">return</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">this</span>.ExportHelper(contentType, (<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">object</span>) password);
    }
</pre> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 该方法接受两个参数，contentType描述如何设置输出数据格式的 X509ContentType 值之一。password访问 X.509 证书数据所需的密码。返回表示当前 X509Certificate 对象的字节数组。</p> <h3 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 四.DotNet数字签名实例：</h3> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 下面提供一个X509Certificate的操作方法实例：</p> <pre class="prettyprint hljs cs" style="padding: 0.5em; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; color: rgb(68, 68, 68); border-radius: 4px; margin-top: 0px; margin-bottom: 1.5em; font-size: 14px; line-height: 1.5em; word-break: break-all; word-wrap: break-word; border: none; overflow-x: auto; background-color: rgb(246, 246, 246);">
  <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">public</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">void</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">EncryptXmlDocument</span>(<span class="hljs-params"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> arqXmlAssinar, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> tagAssinatura, <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">string</span> tagAtributoId, X509Certificate2 x509Cert</span>)
        </span>{
            StreamReader sr = <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>;
            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">try</span>
            {
                sr = System.IO.File.OpenText(arqXmlAssinar);
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">var</span> xmlString = sr.ReadToEnd();
                sr.Close();
                sr = <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>;
                XmlDocument doc = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> XmlDocument { PreserveWhitespace = <span class="hljs-literal" style="color: rgb(120, 169, 96);">false</span> };
                doc.LoadXml(xmlString);
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (doc.GetElementsByTagName(tagAssinatura).Count == <span class="hljs-number" style="color: rgb(136, 0, 0);">0</span>)
                {
                    <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> Exception(tagAssinatura.Trim());
                }
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (doc.GetElementsByTagName(tagAtributoId).Count == <span class="hljs-number" style="color: rgb(136, 0, 0);">0</span>)
                {
                    <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> Exception(tagAtributoId.Trim());
                }
                XmlNodeList lists = doc.GetElementsByTagName(tagAssinatura);
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">foreach</span> (XmlNode nodes <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">in</span> lists)
                {
                    <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">foreach</span> (XmlNode childNodes <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">in</span> nodes.ChildNodes)
                    {
                        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (!childNodes.Name.Equals(tagAtributoId))
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">continue</span>;
                        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (childNodes.NextSibling != <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span> &amp;&amp; childNodes.NextSibling.Name.Equals(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;Signature&quot;</span>))
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">continue</span>;
                        Reference reference = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> Reference { Uri = <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;&quot;</span> };                                 
                        XmlElement childElemen = (XmlElement)childNodes;
                        <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (childElemen.GetAttributeNode(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;Id&quot;</span>) != <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
                        {
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">var</span> attributeNode = childElemen.GetAttributeNode(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;Id&quot;</span>);
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (attributeNode != <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
                                reference.Uri = <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;#&quot;</span> + attributeNode.Value;
                        }
                        <span class="hljs-function"><span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">else</span> <span class="hljs-title" style="color: rgb(136, 0, 0); font-weight: bold;">if</span> (<span class="hljs-params">childElemen.GetAttributeNode(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;id&quot;</span></span>) !</span>= <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
                        {
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">var</span> attributeNode = childElemen.GetAttributeNode(<span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;id&quot;</span>);
                            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (attributeNode != <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>)
                                reference.Uri = <span class="hljs-string" style="color: rgb(136, 0, 0);">&quot;#&quot;</span> + attributeNode.Value;
                        }
                        XmlDocument documentoNovo = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> XmlDocument();
                        documentoNovo.LoadXml(nodes.OuterXml);
                        SignedXml signedXml = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> SignedXml(documentoNovo) { SigningKey = x509Cert.PrivateKey };
                        XmlDsigEnvelopedSignatureTransform env = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> XmlDsigEnvelopedSignatureTransform();
                        reference.AddTransform(env);
                        XmlDsigC14NTransform c14 = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> XmlDsigC14NTransform();
                        reference.AddTransform(c14);
                        signedXml.AddReference(reference);
                        KeyInfo keyInfo = <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> KeyInfo();
                        keyInfo.AddClause(<span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> KeyInfoX509Data(x509Cert));
                        signedXml.KeyInfo = keyInfo;
                        signedXml.ComputeSignature();
                        XmlElement xmlDigitalSignature = signedXml.GetXml();
nodes.AppendChild(doc.ImportNode(xmlDigitalSignature, <span class="hljs-literal" style="color: rgb(120, 169, 96);">true</span>));
                    }
                }
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">var</span> xmlDoc = doc;
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">var</span> stringXmlAssinado = xmlDoc.OuterXml;
                StreamWriter sw2 = System.IO.File.CreateText(arqXmlAssinar);
                sw2.Write(stringXmlAssinado);
                sw2.Close();
            }
            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">catch</span> (CryptographicException ex)
            {
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> CryptographicException(ex.Message);
            }
            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">catch</span> (Exception e)
            {
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">throw</span> <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">new</span> Exception(e.Message);
            }
            <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">finally</span>
            {
                <span class="hljs-keyword" style="color: rgb(51, 51, 51); font-weight: 700;">if</span> (sr != <span class="hljs-literal" style="color: rgb(120, 169, 96);">null</span>) sr.Close();
            }
        }
</pre> <h3 style="margin: 0px 0px 0.5em; font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; line-height: 1.6em; color: rgb(51, 51, 51); text-rendering: optimizeLegibility; font-size: 18px; text-indent: 1em; background-color: rgb(254, 254, 254);"> 五.总结：</h3> <p style="margin: 0px 0px 0.75em; font-size: 16px; line-height: 27.2px; text-indent: 1em; color: rgb(51, 51, 51); font-family: 'Helvetica Neue', Helvetica, Tahoma, Arial, STXihei, 'Microsoft YaHei', 微软雅黑, sans-serif; background-color: rgb(254, 254, 254);"> 上面是有关.NET数字证书的简单介绍，如有写的不对的地方还望多多见谅，在博文中有些类和方法没有较多的列举出来，有兴趣的可以自己去深入的了解。我们学习一个知识时，已经从知识的结构了解开始，这样有利于我们站在全局思考问题。</p> (责任编辑：那一抹忧伤)</td> 
        </tr> 
       </tbody>
      </table> 
     </div> 
     <div class="dede_pages"> 
      <ul data-am-widget="pagination" class="am-pagination am-pagination-default"></ul> 
     </div> 
    </article> 
    <div class="_DEDECY" style="" data-verion="0.0.17">
     <div id="SOHUCS" sid="201745"></div>
    </div>
    <script>(function(){var doc = document,s = doc.createElement('script'),h = doc.getElementsByTagName('head')[0] || doc.head || doc.documentElement;s.type = 'text/javascript';s.charset = 'utf-8';s.src='http://assets.changyan.sohu.com/upload/changyan.js?conf=prod_789fe3d88ecb7677fe4e1eac18b60939&appid=cys5pBnsd';h.insertBefore(s,h.firstChild);window.SCS_NO_IFRAME = true;})()</script> 
    <div id="changyan-comments" style="display:none"> 
     <ol id="comments-list"> 
     </ol> 
    </div> 
    <!--<hr class="am-article-divider blog-hr">

    <ul class="am-pagination blog-pagination">

      <li class="am-pagination-prev">上一篇：<a href='/pc/fwq/201736.html'>如何在Shell脚本中跟踪调试命令的执行</a> </li>

      <li class="am-pagination-next">下一篇：<a href='/pc/fwq/201756.html'>Https证书配置</a> </li>

    </ul>--> 
   </div> 
   <div class="am-u-md-4 blog-sidebar"> 
    <div class="am-panel-group"> 
     <section class="am-panel am-panel-default"> 
      <div class="am-panel-hd">
       最近关注
      </div> 
      <ul class="am-list blog-list">
       <li><a href="view.php?aid=241371">ubuntu15.04怎么卸载软件</a> </li> 
       <li><a href="view.php?aid=241370">CentOS系统中使用yum命令安装redis</a> </li> 
       <li><a href="view.php?aid=241369">Ubuntu如何使用dpkg命令卸载软件？</a> </li> 
       <li><a href="view.php?aid=241368">如何在ubuntu下安装wine？</a> </li> 
       <li><a href="view.php?aid=241243">memcache缓存服务器（Nginx+PHP+memcache+M</a> </li> 
      </ul> 
     </section> 
     <section class="am-panel am-panel-default"> 
      <div class="am-panel-hd">
       热点内容
      </div> 
      <ul class="am-list blog-list">
       <li><a href="view.php?aid=165342">CocoaPods安装出现SSL verification error</a> </li> 
       <li><a href="view.php?aid=102947">阿里云服务有哪些地域可以选择？</a> </li> 
       <li><a href="view.php?aid=152258">ubuntu16.04 NVIDIA显卡驱动安装</a> </li> 
       <li><a href="view.php?aid=123096">进入WSL（或者说 Bash on Ubuntu on Window</a> </li> 
       <li><a href="view.php?aid=169240">Xcode8 pod install 报错 “Generating Pod</a> </li> 
      </ul> 
     </section> 
    </div> 
   </div> 
  </div>
  <footer class="blog-footer"> 
   <small>Powered by <a href="http://www.qingpingshan.com" title="清屏网_在线知识学习平台" target="_blank"><strong>清屏网</strong></a><br /> &copy; 2004-2015 <a href="http://www.qingpingshan.com/" target="_blank">QingPingShan</a> Inc.<br />清屏网 版权所有 豫ICP备15026204号 
    <!-- /powered --></small> 
   <p></p> 
  </footer> 
  <!--[if lt IE 9]>
			<script src="http://libs.baidu.com/jquery/1.11.1/jquery.min.js"></script>
			<script src="http://cdn.staticfile.org/modernizr/2.8.3/modernizr.js"></script>
			<script src="assets/js/polyfill/rem.min.js"></script>
			<script src="assets/js/polyfill/respond.min.js"></script>
			<script src="assets/js/amazeui.legacy.js"></script>
		<![endif]--> 
  <!--[if (gte IE 9)|!(IE)]>
			<!--> 
  <script src="assets/js/jquery.min.js"></script> 
  <script src="assets/js/amazeui.min.js"></script> 
  <!--<![endif]-->  
 </body>
</html>